/*
 * 
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

package com.douyin.open.client;

import com.douyin.open.ApiCallback;
import com.douyin.open.ApiClient;
import com.douyin.open.ApiException;
import com.douyin.open.ApiResponse;
import com.douyin.open.Configuration;
import com.douyin.open.Pair;
import com.douyin.open.ProgressRequestBody;
import com.douyin.open.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.douyin.open.model.DataUserCommentResponse;
import com.douyin.open.model.DataUserFansResponse;
import com.douyin.open.model.DataUserItemResponse;
import com.douyin.open.model.DataUserLikeResponse;
import com.douyin.open.model.DataUserPageResponse;
import com.douyin.open.model.DataUserShareResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DataUserApi {
    private ApiClient apiClient;

    public DataUserApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DataUserApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for dataUserCommentGet
     * @param accessToken 调用/oauth/client_token/生成的token，此token不需要用户授权。 (required)
     * @param beginDate 开始日期(2019-01-01) (required)
     * @param endDate 结束日期(2019-01-01) (required)
     * @param openId 如果是client_access_token, 则不需要传open_id。操作用户数据的接口都需要传入open_id。 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call dataUserCommentGetCall(String accessToken, String beginDate, String endDate, String openId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/data/user/comment/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accessToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("access_token", accessToken));
        if (openId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("open_id", openId));
        if (beginDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("begin_date", beginDate));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end_date", endDate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call dataUserCommentGetValidateBeforeCall(String accessToken, String beginDate, String endDate, String openId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling dataUserCommentGet(Async)");
        }
        // verify the required parameter 'beginDate' is set
        if (beginDate == null) {
            throw new ApiException("Missing the required parameter 'beginDate' when calling dataUserCommentGet(Async)");
        }
        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling dataUserCommentGet(Async)");
        }
        
        com.squareup.okhttp.Call call = dataUserCommentGetCall(accessToken, beginDate, endDate, openId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 获取用户评论情况
     * * Scope: &#x60;data.user&#x60; 
     * @param accessToken 调用/oauth/client_token/生成的token，此token不需要用户授权。 (required)
     * @param beginDate 开始日期(2019-01-01) (required)
     * @param endDate 结束日期(2019-01-01) (required)
     * @param openId 如果是client_access_token, 则不需要传open_id。操作用户数据的接口都需要传入open_id。 (optional)
     * @return DataUserCommentResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DataUserCommentResponse dataUserCommentGet(String accessToken, String beginDate, String endDate, String openId) throws ApiException {
        ApiResponse<DataUserCommentResponse> resp = dataUserCommentGetWithHttpInfo(accessToken, beginDate, endDate, openId);
        return resp.getData();
    }

    /**
     * 获取用户评论情况
     * * Scope: &#x60;data.user&#x60; 
     * @param accessToken 调用/oauth/client_token/生成的token，此token不需要用户授权。 (required)
     * @param beginDate 开始日期(2019-01-01) (required)
     * @param endDate 结束日期(2019-01-01) (required)
     * @param openId 如果是client_access_token, 则不需要传open_id。操作用户数据的接口都需要传入open_id。 (optional)
     * @return ApiResponse&lt;DataUserCommentResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DataUserCommentResponse> dataUserCommentGetWithHttpInfo(String accessToken, String beginDate, String endDate, String openId) throws ApiException {
        com.squareup.okhttp.Call call = dataUserCommentGetValidateBeforeCall(accessToken, beginDate, endDate, openId, null, null);
        Type localVarReturnType = new TypeToken<DataUserCommentResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 获取用户评论情况 (asynchronously)
     * * Scope: &#x60;data.user&#x60; 
     * @param accessToken 调用/oauth/client_token/生成的token，此token不需要用户授权。 (required)
     * @param beginDate 开始日期(2019-01-01) (required)
     * @param endDate 结束日期(2019-01-01) (required)
     * @param openId 如果是client_access_token, 则不需要传open_id。操作用户数据的接口都需要传入open_id。 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call dataUserCommentGetAsync(String accessToken, String beginDate, String endDate, String openId, final ApiCallback<DataUserCommentResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = dataUserCommentGetValidateBeforeCall(accessToken, beginDate, endDate, openId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DataUserCommentResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for dataUserFansGet
     * @param accessToken 调用/oauth/client_token/生成的token，此token不需要用户授权。 (required)
     * @param beginDate 开始日期(2019-01-01) (required)
     * @param endDate 结束日期(2019-01-01) (required)
     * @param openId 如果是client_access_token, 则不需要传open_id。操作用户数据的接口都需要传入open_id。 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call dataUserFansGetCall(String accessToken, String beginDate, String endDate, String openId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/data/user/fans/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accessToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("access_token", accessToken));
        if (openId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("open_id", openId));
        if (beginDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("begin_date", beginDate));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end_date", endDate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call dataUserFansGetValidateBeforeCall(String accessToken, String beginDate, String endDate, String openId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling dataUserFansGet(Async)");
        }
        // verify the required parameter 'beginDate' is set
        if (beginDate == null) {
            throw new ApiException("Missing the required parameter 'beginDate' when calling dataUserFansGet(Async)");
        }
        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling dataUserFansGet(Async)");
        }
        
        com.squareup.okhttp.Call call = dataUserFansGetCall(accessToken, beginDate, endDate, openId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 获取用户粉丝数情况
     * * Scope: &#x60;data.user&#x60; 
     * @param accessToken 调用/oauth/client_token/生成的token，此token不需要用户授权。 (required)
     * @param beginDate 开始日期(2019-01-01) (required)
     * @param endDate 结束日期(2019-01-01) (required)
     * @param openId 如果是client_access_token, 则不需要传open_id。操作用户数据的接口都需要传入open_id。 (optional)
     * @return DataUserFansResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DataUserFansResponse dataUserFansGet(String accessToken, String beginDate, String endDate, String openId) throws ApiException {
        ApiResponse<DataUserFansResponse> resp = dataUserFansGetWithHttpInfo(accessToken, beginDate, endDate, openId);
        return resp.getData();
    }

    /**
     * 获取用户粉丝数情况
     * * Scope: &#x60;data.user&#x60; 
     * @param accessToken 调用/oauth/client_token/生成的token，此token不需要用户授权。 (required)
     * @param beginDate 开始日期(2019-01-01) (required)
     * @param endDate 结束日期(2019-01-01) (required)
     * @param openId 如果是client_access_token, 则不需要传open_id。操作用户数据的接口都需要传入open_id。 (optional)
     * @return ApiResponse&lt;DataUserFansResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DataUserFansResponse> dataUserFansGetWithHttpInfo(String accessToken, String beginDate, String endDate, String openId) throws ApiException {
        com.squareup.okhttp.Call call = dataUserFansGetValidateBeforeCall(accessToken, beginDate, endDate, openId, null, null);
        Type localVarReturnType = new TypeToken<DataUserFansResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 获取用户粉丝数情况 (asynchronously)
     * * Scope: &#x60;data.user&#x60; 
     * @param accessToken 调用/oauth/client_token/生成的token，此token不需要用户授权。 (required)
     * @param beginDate 开始日期(2019-01-01) (required)
     * @param endDate 结束日期(2019-01-01) (required)
     * @param openId 如果是client_access_token, 则不需要传open_id。操作用户数据的接口都需要传入open_id。 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call dataUserFansGetAsync(String accessToken, String beginDate, String endDate, String openId, final ApiCallback<DataUserFansResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = dataUserFansGetValidateBeforeCall(accessToken, beginDate, endDate, openId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DataUserFansResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for dataUserItemGet
     * @param accessToken 调用/oauth/client_token/生成的token，此token不需要用户授权。 (required)
     * @param beginDate 开始日期(2019-01-01) (required)
     * @param endDate 结束日期(2019-01-01) (required)
     * @param openId 如果是client_access_token, 则不需要传open_id。操作用户数据的接口都需要传入open_id。 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call dataUserItemGetCall(String accessToken, String beginDate, String endDate, String openId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/data/user/item/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (openId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("open_id", openId));
        if (accessToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("access_token", accessToken));
        if (beginDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("begin_date", beginDate));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end_date", endDate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call dataUserItemGetValidateBeforeCall(String accessToken, String beginDate, String endDate, String openId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling dataUserItemGet(Async)");
        }
        // verify the required parameter 'beginDate' is set
        if (beginDate == null) {
            throw new ApiException("Missing the required parameter 'beginDate' when calling dataUserItemGet(Async)");
        }
        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling dataUserItemGet(Async)");
        }
        
        com.squareup.okhttp.Call call = dataUserItemGetCall(accessToken, beginDate, endDate, openId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 获取用户视频播放情况
     * * Scope: &#x60;data.user&#x60; 
     * @param accessToken 调用/oauth/client_token/生成的token，此token不需要用户授权。 (required)
     * @param beginDate 开始日期(2019-01-01) (required)
     * @param endDate 结束日期(2019-01-01) (required)
     * @param openId 如果是client_access_token, 则不需要传open_id。操作用户数据的接口都需要传入open_id。 (optional)
     * @return DataUserItemResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DataUserItemResponse dataUserItemGet(String accessToken, String beginDate, String endDate, String openId) throws ApiException {
        ApiResponse<DataUserItemResponse> resp = dataUserItemGetWithHttpInfo(accessToken, beginDate, endDate, openId);
        return resp.getData();
    }

    /**
     * 获取用户视频播放情况
     * * Scope: &#x60;data.user&#x60; 
     * @param accessToken 调用/oauth/client_token/生成的token，此token不需要用户授权。 (required)
     * @param beginDate 开始日期(2019-01-01) (required)
     * @param endDate 结束日期(2019-01-01) (required)
     * @param openId 如果是client_access_token, 则不需要传open_id。操作用户数据的接口都需要传入open_id。 (optional)
     * @return ApiResponse&lt;DataUserItemResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DataUserItemResponse> dataUserItemGetWithHttpInfo(String accessToken, String beginDate, String endDate, String openId) throws ApiException {
        com.squareup.okhttp.Call call = dataUserItemGetValidateBeforeCall(accessToken, beginDate, endDate, openId, null, null);
        Type localVarReturnType = new TypeToken<DataUserItemResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 获取用户视频播放情况 (asynchronously)
     * * Scope: &#x60;data.user&#x60; 
     * @param accessToken 调用/oauth/client_token/生成的token，此token不需要用户授权。 (required)
     * @param beginDate 开始日期(2019-01-01) (required)
     * @param endDate 结束日期(2019-01-01) (required)
     * @param openId 如果是client_access_token, 则不需要传open_id。操作用户数据的接口都需要传入open_id。 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call dataUserItemGetAsync(String accessToken, String beginDate, String endDate, String openId, final ApiCallback<DataUserItemResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = dataUserItemGetValidateBeforeCall(accessToken, beginDate, endDate, openId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DataUserItemResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for dataUserLikeGet
     * @param accessToken 调用/oauth/client_token/生成的token，此token不需要用户授权。 (required)
     * @param beginDate 开始日期(2019-01-01) (required)
     * @param endDate 结束日期(2019-01-01) (required)
     * @param openId 如果是client_access_token, 则不需要传open_id。操作用户数据的接口都需要传入open_id。 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call dataUserLikeGetCall(String accessToken, String beginDate, String endDate, String openId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/data/user/like/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accessToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("access_token", accessToken));
        if (openId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("open_id", openId));
        if (beginDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("begin_date", beginDate));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end_date", endDate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call dataUserLikeGetValidateBeforeCall(String accessToken, String beginDate, String endDate, String openId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling dataUserLikeGet(Async)");
        }
        // verify the required parameter 'beginDate' is set
        if (beginDate == null) {
            throw new ApiException("Missing the required parameter 'beginDate' when calling dataUserLikeGet(Async)");
        }
        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling dataUserLikeGet(Async)");
        }
        
        com.squareup.okhttp.Call call = dataUserLikeGetCall(accessToken, beginDate, endDate, openId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 获取用户点赞情况
     * * Scope: &#x60;data.user&#x60; 
     * @param accessToken 调用/oauth/client_token/生成的token，此token不需要用户授权。 (required)
     * @param beginDate 开始日期(2019-01-01) (required)
     * @param endDate 结束日期(2019-01-01) (required)
     * @param openId 如果是client_access_token, 则不需要传open_id。操作用户数据的接口都需要传入open_id。 (optional)
     * @return DataUserLikeResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DataUserLikeResponse dataUserLikeGet(String accessToken, String beginDate, String endDate, String openId) throws ApiException {
        ApiResponse<DataUserLikeResponse> resp = dataUserLikeGetWithHttpInfo(accessToken, beginDate, endDate, openId);
        return resp.getData();
    }

    /**
     * 获取用户点赞情况
     * * Scope: &#x60;data.user&#x60; 
     * @param accessToken 调用/oauth/client_token/生成的token，此token不需要用户授权。 (required)
     * @param beginDate 开始日期(2019-01-01) (required)
     * @param endDate 结束日期(2019-01-01) (required)
     * @param openId 如果是client_access_token, 则不需要传open_id。操作用户数据的接口都需要传入open_id。 (optional)
     * @return ApiResponse&lt;DataUserLikeResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DataUserLikeResponse> dataUserLikeGetWithHttpInfo(String accessToken, String beginDate, String endDate, String openId) throws ApiException {
        com.squareup.okhttp.Call call = dataUserLikeGetValidateBeforeCall(accessToken, beginDate, endDate, openId, null, null);
        Type localVarReturnType = new TypeToken<DataUserLikeResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 获取用户点赞情况 (asynchronously)
     * * Scope: &#x60;data.user&#x60; 
     * @param accessToken 调用/oauth/client_token/生成的token，此token不需要用户授权。 (required)
     * @param beginDate 开始日期(2019-01-01) (required)
     * @param endDate 结束日期(2019-01-01) (required)
     * @param openId 如果是client_access_token, 则不需要传open_id。操作用户数据的接口都需要传入open_id。 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call dataUserLikeGetAsync(String accessToken, String beginDate, String endDate, String openId, final ApiCallback<DataUserLikeResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = dataUserLikeGetValidateBeforeCall(accessToken, beginDate, endDate, openId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DataUserLikeResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for dataUserPageGet
     * @param accessToken 调用/oauth/client_token/生成的token，此token不需要用户授权。 (required)
     * @param beginDate 开始日期(2019-01-01) (required)
     * @param endDate 结束日期(2019-01-01) (required)
     * @param openId 如果是client_access_token, 则不需要传open_id。操作用户数据的接口都需要传入open_id。 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call dataUserPageGetCall(String accessToken, String beginDate, String endDate, String openId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/data/user/page/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (openId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("open_id", openId));
        if (accessToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("access_token", accessToken));
        if (beginDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("begin_date", beginDate));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end_date", endDate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call dataUserPageGetValidateBeforeCall(String accessToken, String beginDate, String endDate, String openId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling dataUserPageGet(Async)");
        }
        // verify the required parameter 'beginDate' is set
        if (beginDate == null) {
            throw new ApiException("Missing the required parameter 'beginDate' when calling dataUserPageGet(Async)");
        }
        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling dataUserPageGet(Async)");
        }
        
        com.squareup.okhttp.Call call = dataUserPageGetCall(accessToken, beginDate, endDate, openId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 获取用户主页情况
     * * Scope: &#x60;data.user&#x60; 
     * @param accessToken 调用/oauth/client_token/生成的token，此token不需要用户授权。 (required)
     * @param beginDate 开始日期(2019-01-01) (required)
     * @param endDate 结束日期(2019-01-01) (required)
     * @param openId 如果是client_access_token, 则不需要传open_id。操作用户数据的接口都需要传入open_id。 (optional)
     * @return DataUserPageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DataUserPageResponse dataUserPageGet(String accessToken, String beginDate, String endDate, String openId) throws ApiException {
        ApiResponse<DataUserPageResponse> resp = dataUserPageGetWithHttpInfo(accessToken, beginDate, endDate, openId);
        return resp.getData();
    }

    /**
     * 获取用户主页情况
     * * Scope: &#x60;data.user&#x60; 
     * @param accessToken 调用/oauth/client_token/生成的token，此token不需要用户授权。 (required)
     * @param beginDate 开始日期(2019-01-01) (required)
     * @param endDate 结束日期(2019-01-01) (required)
     * @param openId 如果是client_access_token, 则不需要传open_id。操作用户数据的接口都需要传入open_id。 (optional)
     * @return ApiResponse&lt;DataUserPageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DataUserPageResponse> dataUserPageGetWithHttpInfo(String accessToken, String beginDate, String endDate, String openId) throws ApiException {
        com.squareup.okhttp.Call call = dataUserPageGetValidateBeforeCall(accessToken, beginDate, endDate, openId, null, null);
        Type localVarReturnType = new TypeToken<DataUserPageResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 获取用户主页情况 (asynchronously)
     * * Scope: &#x60;data.user&#x60; 
     * @param accessToken 调用/oauth/client_token/生成的token，此token不需要用户授权。 (required)
     * @param beginDate 开始日期(2019-01-01) (required)
     * @param endDate 结束日期(2019-01-01) (required)
     * @param openId 如果是client_access_token, 则不需要传open_id。操作用户数据的接口都需要传入open_id。 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call dataUserPageGetAsync(String accessToken, String beginDate, String endDate, String openId, final ApiCallback<DataUserPageResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = dataUserPageGetValidateBeforeCall(accessToken, beginDate, endDate, openId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DataUserPageResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for dataUserShareGet
     * @param accessToken 调用/oauth/client_token/生成的token，此token不需要用户授权。 (required)
     * @param beginDate 开始日期(2019-01-01) (required)
     * @param endDate 结束日期(2019-01-01) (required)
     * @param openId 如果是client_access_token, 则不需要传open_id。操作用户数据的接口都需要传入open_id。 (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call dataUserShareGetCall(String accessToken, String beginDate, String endDate, String openId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;
        
        // create path and map variables
        String localVarPath = "/data/user/share/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (accessToken != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("access_token", accessToken));
        if (openId != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("open_id", openId));
        if (beginDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("begin_date", beginDate));
        if (endDate != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("end_date", endDate));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }
    
    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call dataUserShareGetValidateBeforeCall(String accessToken, String beginDate, String endDate, String openId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        // verify the required parameter 'accessToken' is set
        if (accessToken == null) {
            throw new ApiException("Missing the required parameter 'accessToken' when calling dataUserShareGet(Async)");
        }
        // verify the required parameter 'beginDate' is set
        if (beginDate == null) {
            throw new ApiException("Missing the required parameter 'beginDate' when calling dataUserShareGet(Async)");
        }
        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling dataUserShareGet(Async)");
        }
        
        com.squareup.okhttp.Call call = dataUserShareGetCall(accessToken, beginDate, endDate, openId, progressListener, progressRequestListener);
        return call;

        
        
        
        
    }

    /**
     * 获取用户分享情况
     * * Scope: &#x60;data.user&#x60; 
     * @param accessToken 调用/oauth/client_token/生成的token，此token不需要用户授权。 (required)
     * @param beginDate 开始日期(2019-01-01) (required)
     * @param endDate 结束日期(2019-01-01) (required)
     * @param openId 如果是client_access_token, 则不需要传open_id。操作用户数据的接口都需要传入open_id。 (optional)
     * @return DataUserShareResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public DataUserShareResponse dataUserShareGet(String accessToken, String beginDate, String endDate, String openId) throws ApiException {
        ApiResponse<DataUserShareResponse> resp = dataUserShareGetWithHttpInfo(accessToken, beginDate, endDate, openId);
        return resp.getData();
    }

    /**
     * 获取用户分享情况
     * * Scope: &#x60;data.user&#x60; 
     * @param accessToken 调用/oauth/client_token/生成的token，此token不需要用户授权。 (required)
     * @param beginDate 开始日期(2019-01-01) (required)
     * @param endDate 结束日期(2019-01-01) (required)
     * @param openId 如果是client_access_token, 则不需要传open_id。操作用户数据的接口都需要传入open_id。 (optional)
     * @return ApiResponse&lt;DataUserShareResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<DataUserShareResponse> dataUserShareGetWithHttpInfo(String accessToken, String beginDate, String endDate, String openId) throws ApiException {
        com.squareup.okhttp.Call call = dataUserShareGetValidateBeforeCall(accessToken, beginDate, endDate, openId, null, null);
        Type localVarReturnType = new TypeToken<DataUserShareResponse>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * 获取用户分享情况 (asynchronously)
     * * Scope: &#x60;data.user&#x60; 
     * @param accessToken 调用/oauth/client_token/生成的token，此token不需要用户授权。 (required)
     * @param beginDate 开始日期(2019-01-01) (required)
     * @param endDate 结束日期(2019-01-01) (required)
     * @param openId 如果是client_access_token, 则不需要传open_id。操作用户数据的接口都需要传入open_id。 (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call dataUserShareGetAsync(String accessToken, String beginDate, String endDate, String openId, final ApiCallback<DataUserShareResponse> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = dataUserShareGetValidateBeforeCall(accessToken, beginDate, endDate, openId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<DataUserShareResponse>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
